@model List<string>

@{
    ViewData["Title"] = "Home Page";
}

<div class="container mt-4">
    <div class="row">
        <!-- Log Section with Scrolling -->
        <div class="col-md-6">
            <div class="row">
                <div class="col-md-12">
                    <div id="logContainer" class="p-3 bg-light border rounded" style="height: 300px; overflow-y: auto;">
                        @foreach (var log in Model)
                        {
                            <div>@log</div>
                        }
                    </div>
                </div>
            </div>
            <div class="row mt-4">
                <div class="col-md-12">
                    <div class="d-flex justify-content-between gap-2">
                        <button onclick="sendCommand('ConnectCmd')" class="btn btn-success">Connect Robot</button>
                        <button onclick="sendCommand('HighPowerOn')" class="btn btn-success">High Power On</button>
                        <button onclick="sendCommand('PowerDown')" class="btn btn-danger">Power Down</button>
                        <button onclick="sendCommand('Reset')" class="btn btn-warning">Reset</button>
                    </div>
                </div>
                <div class="col-md-12 mt-2">
                    <div class="d-flex justify-content-between gap-2">
                        <button onclick="sendCommand('RobotManagerPresenter')" class="btn btn-secondary">Robot Manager</button>
                        <button onclick="sendCommand('IoMonitorPresenter')" class="btn btn-secondary">I/O Monitor</button>
                        <button onclick="sendCommand('PointTeachingPresenter')" class="btn btn-secondary">Point Teaching</button>
                        <button onclick="sendCommand('ControllerToolsPresenter')" class="btn btn-secondary">Controller Tools</button>
                    </div>
                </div>
                <div class="col-md-12 mt-2">
                    <div style="display: flex; justify-content: space-between; gap: 10px;">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="recordSpray">
                            <label class="form-check-label" for="recordSpray">Record Spray</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="spray">
                            <label class="form-check-label" for="spray">Spray</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="blot" onchange="toggleBlotOptions();">
                            <label class="form-check-label" for="blot">Blot</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="blotType" value="back" id="backBlot" disabled>
                            <label class="form-check-label" for="backBlot">Back Blot</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="blotType" value="front" id="frontBlot" disabled>
                            <label class="form-check-label" for="frontBlot">Front Blot</label>
                        </div>
                        <button type="submit" onclick="updateProcessOptions()" class="btn btn-secondary">Save Options</button>
                    </div>
                </div>
                <div class="col-md-12 mt-2">
                    <div class="d-flex justify-content-between gap-2">
                        <input type="text" id="gridBoxName" class="form-control" placeholder="Grid Box Name" />
                        <input type="text" id="sampleName" class="form-control" placeholder="Sample Name" />
                        <input type="number" id="gridPosition" class="form-control" placeholder="Grid Position" min="1" max="8" onchange="fetchGridInfo()" />
                        <button class="btn btn-primary" onclick="updateGridInfo()">Save Grid Info</button>
                    </div>
                </div>
                <div class="col-md-12 mt-2">
                    <div class="d-flex justify-content-between gap-2">
                        <button onclick="sendCommand('MoveToLoadTweezers')" class="btn btn-secondary">Load Tweezers</button>
                        <button onclick="sendCommand('MoveToSprayPosition')" class="btn btn-secondary">Spray Position</button>
                        <button onclick="sendCommand('PlungeProcess')" class="btn btn-secondary">Plunge Process</button>
                        <button onclick="storeGrid()" class="btn btn-secondary">Store Grid</button>
                    </div>
                </div>
                <div class="col-md-12 mt-4">
                    <h2>Update Configuration</h2>
                    <form id="configForm" onsubmit="event.preventDefault(); updateConfig();">
                        <div class="form-group">
                            <label for="prep_delay">Prep Delay:</label>
                            <input type="number" id="prep_delay" class="form-control" required />
                        </div>
                        <div class="form-group">
                            <label for="spray_time">Spray Time:</label>
                            <input type="number" id="spray_time" class="form-control" required />
                        </div>
                        <div class="form-group">
                            <label for="blot_time">Blot Time:</label>
                            <input type="number" id="blot_time" class="form-control" required />
                        </div>
                        <div class="form-group">
                            <label for="clean_time">Clean Time:</label>
                            <input type="number" id="clean_time" class="form-control" required />
                        </div>
                        <div class="form-group">
                            <label for="clean_cycles">Clean Cycles:</label>
                            <input type="number" id="clean_cycles" class="form-control" required />
                        </div>
                        <div class="form-group">
                            <label for="timeout_blot_motion">Timeout Blot Motion:</label>
                            <input type="number" id="timeout_blot_motion" class="form-control" required />
                        </div>
                        <div class="form-group">
                            <label for="limz">Grid Store Jump Parameter (LimZ):</label>
                            <input type="number" id="limz" class="form-control" required />
                        </div>
                        <div class="form-group">
                            <label for="speed">Default Motion Speed:</label>
                            <input type="number" id="speed" class="form-control" required />
                        </div>
                        <div class="form-group">
                            <label for="accel">Default Motion Acceleration:</label>
                            <input type="number" id="accel" class="form-control" required />
                        </div>
                        <div class="form-group">
                            <label for="decel">Default Motion Deceleration:</label>
                            <input type="number" id="decel" class="form-control" required />
                        </div>
                        <button type="submit" class="btn btn-primary">Update Configuration</button>
                    </form>
                </div>
            </div>
        </div>

        <!-- Serial Port and Sensor Data Section -->
        <div class="col-md-6">
            <div class="row">
                <div class="col-md-12 mt-2">
                    <div id="messages" class="p-3 bg-light border rounded" style="height: 300px; overflow-y: auto;"></div>
                </div>
                <div class="col-md-12 mt-2">
                    <div class="d-flex justify-content-between gap-2">
                        <button onclick="startCommunication()" class="btn btn-success">Start Serial Log</button>
                        <button onclick="stopCommunication()" class="btn btn-danger">Stop Serial Log</button>
                        <button onclick="restartCommunication()" class="btn btn-warning">Restart Serial Log</button>
                    </div>
                </div>
                <div class="col-md-12 mt-2">
                    <div class="d-flex justify-content-between gap-2">
                        <select id="comPortSelect" class="form-control"></select>
                    </div>
                </div>
                <div class="col-md-12 mt-2">
                    <div class="d-flex justify-content-between gap-2">
                        <button onclick="startRecording()" class="btn btn-success">Start Recording</button>
                        <button onclick="stopRecording()" class="btn btn-danger">Stop Recording</button>
                        <button onclick="listRecordings()" class="btn btn-secondary">List Recordings</button>
                        <button onclick="downloadRecording()" class="btn btn-secondary">Download Recording</button>
                    </div>
                    <select id="recordingSelect" class="form-control mt-2"></select>
                </div>
                <div class="col-md-12 mt-2">
                    <div class="card bg-light border rounded p-3">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h5>Time:</h5>
                                <p id="time" class="mb-0"></p>
                            </div>
                            <div>
                                <h5>Temperature:</h5>
                                <p id="temperature" class="mb-0"></p>
                            </div>
                            <div>
                                <h5>Humidity:</h5>
                                <p id="humidity" class="mb-0"></p>
                            </div>
                            <div>
                                <h5>Pressure:</h5>
                                <p id="pressure" class="mb-0"></p>
                            </div>
                            <div>
                                <h5>IR Sensor:</h5>
                                <p id="irSensor" class="mb-0"></p>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-12 mt-2">
                    <div class="d-flex justify-content-between gap-2">
                        <button onclick="sendCommand('ConnectToCamera')" class="btn btn-success">Connect To Camera</button>
                        <button onclick="sendCommand('TakePicture')" class="btn btn-secondary">Take Picture</button>
                        <button onclick="sendCommand('SavePicture')" class="btn btn-secondary">Save Image</button>
                        <button onclick="listMedia()" class="btn btn-secondary">List Media</button>
                    </div>
                </div>
                <div class="col-md-12 mt-2">
                    <div class="d-flex justify-content-between gap-2">
                        <button onclick="displaySelectedImage()" class="btn btn-secondary">Display Image</button>
                        <button onclick="downloadSelectedImage()" class="btn btn-secondary">Download Image</button>
                        <button onclick="displaySelectedVideo()" class="btn btn-secondary">Display Video</button>
                        <button onclick="downloadSelectedVideo()" class="btn btn-secondary">Download Video</button>
                    </div>
                </div>
                <div class="col-md-12 mt-2">
                    <div class="d-flex justify-content-between gap-2">
                        <select id="imageSelect" class="form-control"></select>
                        <select id="videoSelect" class="form-control"></select>
                    </div>
                </div>
                <div class="col-md-12 mt-4">
                    <div class="d-flex justify-content-center align-items-center gap-2">
                        <div class="border border-dark-cyan" style="border-width: 2px;">
                            <img id="displayImage" src="~/duck.jpg" class="rounded" style="width: 300px; height: 300px; object-fit: cover;" />
                        </div>
                        <div class="border border-dark-cyan" style="border-width: 2px;">
                            <div class="position-relative" style="width: 300px; height: 300px; overflow: hidden;">
                                <video id="displayVideo" class="rounded" style="width: 100%; height: 100%; object-fit: cover;" autoplay loop muted>
                                    <source src="~/ducks.mp4" type="video/mp4">
                                    Your browser does not support the video tag.
                                </video>
                                <button class="btn btn-secondary position-absolute" style="bottom: 10px; right: 10px; width: 30px; height: 20px;">Play</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.11/signalr.min.js"></script>
<script>
    const logContainer = document.getElementById('logContainer');

    function scrollToBottom() {
        logContainer.scrollTop = logContainer.scrollHeight;
    }

    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/logHub")
        .build();

    connection.on("ReceiveLog", function (log) {
        const div = document.createElement("div");
        div.textContent = log;
        logContainer.appendChild(div);
        scrollToBottom();
    });

    connection.on("ReceiveSensorData", function (sensorData) {
        console.log("Received data:", sensorData);
        const time = sensorData.time;
        document.getElementById('time').textContent = time;
        document.getElementById('temperature').textContent = sensorData.temperature + ' °C';
        document.getElementById('humidity').textContent = sensorData.humidity + ' %';
        document.getElementById('pressure').textContent = sensorData.pressure + ' hPa';
        document.getElementById('irSensor').textContent = sensorData.irSensorState;
        addLogEntry(time, sensorData);

        if (recording) {
            recordedData.push({ time, ...sensorData });
        }
    });

    connection.start().catch(function (err) {
        return console.error(err.toString());
    });

    function sendCommand(command) {
        fetch(`/api/Robot/${command}`, {
            method: 'POST'
        }).then(response => {
            if (response.ok) {
                alert(`${command} command executed successfully.`);
            } else {
                alert(`Failed to execute ${command} command.`);
            }
        }).catch(error => {
            console.error('Error:', error);
            alert(`Error executing ${command} command.`);
        });
    }

    function updateProcessOptions() {
        const options = {
            RecordSpray: document.getElementById('recordSpray').checked,
            RpiRecordSpray: document.getElementById('rpiRecordSpray').checked,
            Spray: document.getElementById('spray').checked,
            SonicateTweezers: document.getElementById('sonicateTweezers').checked,
            Blot: document.getElementById('blot').checked,
            Blot_BackBlot: document.getElementById('backBlot').checked,
            Blot_FrontBlot: document.getElementById('frontBlot').checked
        };

        fetch('/api/Robot/UpdateProcessOptions', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(options)
        }).then(response => {
            if (response.ok) {
                alert('Process options updated successfully.');
            } else {
                alert('Failed to update options.');
            }
        }).catch(error => console.error('Error updating options:', error));
    }

    function toggleBlotOptions() {
        const blotChecked = document.getElementById('blot').checked;
        document.getElementById('backBlot').disabled = !blotChecked;
        document.getElementById('frontBlot').disabled = !blotChecked;
    }

    function updateGridInfo() {
        const gridBoxName = document.getElementById('gridBoxName').value;
        const sampleName = document.getElementById('sampleName').value;
        const gridPosition = document.getElementById('gridPosition').value;

        fetch('/api/Robot/GetConfig')
            .then(response => response.json())
            .then(config => {
                const gridLocationIndex = config.robot.locations.findIndex(loc => loc.name === `GridStore${gridPosition}`);
                if (gridLocationIndex !== -1) {
                    config.robot.locations[gridLocationIndex].name = gridBoxName;
                    config.robot.locations[gridLocationIndex].sampleName = sampleName;
                    config.robot.locations[gridLocationIndex].point = parseInt(gridPosition);
                }

                // Send the updated configuration back to the server
                fetch('/api/Robot/UpdateConfig', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(config)
                })
                    .then(response => {
                        if (response.ok) {
                            alert('Grid information updated successfully.');
                        } else {
                            response.text().then(text => alert(`Failed to update grid information: ${text}`));
                        }
                    })
                    .catch(error => console.error('Error updating grid information:', error));
            })
            .catch(error => console.error('Error fetching existing configuration:', error));
    }

    function storeGrid() {
        fetch('/api/Robot/StoreGrid', { method: 'POST' })
            .then(response => {
                if (response.ok) {
                    alert('Grid stored successfully.');
                } else {
                    alert('Failed to store grid.');
                }
            })
            .catch(error => console.error('Error storing grid:', error));
    }

    function startCommunication() {
        const comPort = document.getElementById("comPortSelect").value;
        fetch('/api/Robot/StartSerialPort', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(comPort)
        }).then(response => {
            if (response.ok) {
                clearLogs();
            } else {
                response.text().then(text => alert(`Failed to start communication: ${text}`));
            }
        });
    }

    function stopCommunication() {
        fetch('/api/Robot/StopSerialPort', { method: 'POST' });
    }

    function fetchPorts() {
        fetch('/api/Robot/AvailableSerialPorts', { method: 'GET' })
            .then(response => response.json())
            .then(data => {
                const select = document.getElementById("comPortSelect");
                select.innerHTML = '';
                data.forEach(port => {
                    const option = document.createElement("option");
                    option.value = port;
                    option.textContent = port;
                    select.appendChild(option);
                });
            });
    }

    function fetchGridInfo() {
        const gridPosition = document.getElementById('gridPosition').value;
        if (!gridPosition) return;

        fetch('/api/Robot/GetConfig')
            .then(response => response.json())
            .then(config => {
                const gridLocation = config.robot.locations.find(loc => loc.name === `GridStore${gridPosition}`);
                if (gridLocation) {
                    document.getElementById('gridBoxName').value = gridLocation.name || '';
                    document.getElementById('sampleName').value = gridLocation.sampleName || '';
                    document.getElementById('gridPosition').value = gridLocation.point || '';
                } else {
                    document.getElementById('gridBoxName').value = '';
                    document.getElementById('sampleName').value = '';
                    document.getElementById('gridPosition').value = '';
                }
            })
            .catch(error => console.error('Error fetching grid info:', error));
    }


    function fetchConfig() {
        fetch('/api/Robot/GetConfig')
            .then(response => response.json())
            .then(config => {
                document.getElementById('prep_delay').value = config.biojet_process.prep_delay;
                document.getElementById('spray_time').value = config.biojet_process.spray_time;
                document.getElementById('blot_time').value = config.biojet_process.blot_time;
                document.getElementById('clean_time').value = config.biojet_process.clean_time;
                document.getElementById('clean_cycles').value = config.biojet_process.clean_cycles;
                document.getElementById('timeout_blot_motion').value = config.biojet_process.timeout_blot_motion;

                const limzMatch = config.robot.gridStoreJumpParameters.command.match(/LimZ\s*(-?\d+)/);
                document.getElementById('limz').value = limzMatch ? parseInt(limzMatch[1]) : 0;

                document.getElementById('speed').value = config.robot.defaultMotionParams.speed;
                document.getElementById('accel').value = config.robot.defaultMotionParams.accel;
                document.getElementById('decel').value = config.robot.defaultMotionParams.decel;
            })
            .catch(error => console.error('Error fetching configuration:', error));
    }

    function updateConfig() {
        fetch('/api/Robot/GetConfig')
            .then(response => response.json())
            .then(existingConfig => {
                // Update the existing configuration with new values
                existingConfig.biojet_process.prep_delay = parseInt(document.getElementById('prep_delay').value);
                existingConfig.biojet_process.spray_time = parseInt(document.getElementById('spray_time').value);
                existingConfig.biojet_process.blot_time = parseInt(document.getElementById('blot_time').value);
                existingConfig.biojet_process.clean_time = parseInt(document.getElementById('clean_time').value);
                existingConfig.biojet_process.clean_cycles = parseInt(document.getElementById('clean_cycles').value);
                existingConfig.biojet_process.timeout_blot_motion = parseInt(document.getElementById('timeout_blot_motion').value);

                existingConfig.robot.gridStoreJumpParameters.command = 'LimZ ' + parseInt(document.getElementById('limz').value);
                existingConfig.robot.defaultMotionParams.speed = parseInt(document.getElementById('speed').value);
                existingConfig.robot.defaultMotionParams.accel = parseInt(document.getElementById('accel').value);
                existingConfig.robot.defaultMotionParams.decel = parseInt(document.getElementById('decel').value);

                // Send the updated configuration back to the server
                fetch('/api/Robot/UpdateConfig', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(existingConfig)
                })
                    .then(response => {
                        if (response.ok) {
                            alert('Configuration updated successfully.');
                        } else {
                            response.text().then(text => alert(`Failed to update configuration: ${text}`));
                        }
                    })
                    .catch(error => console.error('Error updating configuration:', error));
            })
            .catch(error => console.error('Error fetching existing configuration:', error));
    }

    function restartCommunication() {
        stopCommunication();
        clearLogs();
        startCommunication();
    }

    function clearLogs() {
        document.getElementById('messages').innerHTML = '';
    }

    function startRecording() {
        recording = true;
        fetch('/api/Robot/StartRecording', { method: 'POST' });
    }

    function stopRecording() {
        recording = false;
        fetch('/api/Robot/StopRecording', { method: 'POST' });
    }

    function listRecordings() {
        fetch('/api/Robot/ListRecordings')
            .then(response => response.json())
            .then(data => {
                const select = document.getElementById("recordingSelect");
                select.innerHTML = '';
                data.forEach(file => {
                    const option = document.createElement("option");
                    option.value = file;
                    option.textContent = file;
                    select.appendChild(option);
                });
            });
    }

    function downloadRecording() {
        const fileName = document.getElementById("recordingSelect").value;
        window.location.href = `/api/Robot/DownloadRecording/${fileName}`;
    }

    function addLogEntry(time, data) {
        const logContainer = document.getElementById('messages');
        const logEntry = document.createElement('div');
        logEntry.textContent = `${time} - Temperature: ${data.temperature} °C, Humidity: ${data.humidity} %, Pressure: ${data.pressure} hPa, IR Sensor: ${data.irSensorState}`;
        logContainer.appendChild(logEntry);
        logContainer.scrollTop = logContainer.scrollHeight;
    }

    function listhMedia() {
        fetch('/api/Robot/AvailableMedia')
            .then(response => response.json())
            .then(data => {
                const imageSelect = document.getElementById("imageSelect");
                const videoSelect = document.getElementById("videoSelect");
                imageSelect.innerHTML = '';
                videoSelect.innerHTML = '';

                data.images.forEach(file => {
                    const option = document.createElement("option");
                    option.value = file;
                    option.textContent = file;
                    imageSelect.appendChild(option);
                });

                data.videos.forEach(file => {
                    const option = document.createElement("option");
                    option.value = file;
                    option.textContent = file;
                    videoSelect.appendChild(option);
                });
            });
    }

    function downloadSelectedImage() {
        const fileName = document.getElementById("imageSelect").value;
        window.location.href = `/api/Robot/DownloadImage/${fileName}`;
    }

    function downloadSelectedVideo() {
        const fileName = document.getElementById("videoSelect").value;
        window.location.href = `/api/Robot/DownloadVideo/${fileName}`;
    }

    function displaySelectedImage() {
        const fileName = document.getElementById("imageSelect").value;
        document.getElementById("displayImage").src = `/Documents/camera-recordings/${fileName}`;
    }

    function displaySelectedVideo() {
        const fileName = document.getElementById("videoSelect").value;
        const videoElement = document.getElementById("displayVideo");
        videoElement.src = `/Documents/camera-recordings/${fileName}`;
        videoElement.load();
    }

    window.onload = function () {
        fetchPorts();
        listhMedia();
        fetchConfig();
    };
</script>
