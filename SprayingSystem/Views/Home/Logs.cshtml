<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Sensor Data Display</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.11/signalr.min.js"></script>
    <style>
        .log-container {
            height: 300px;
            overflow-y: auto;
            background-color: #f8f9fa;
            border: 1px solid #ccc;
            padding: 10px;
        }
    </style>
    <script>
        let recording = false;
        let recordedData = [];

        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/logHub")
            .build();

        connection.on("ReceiveSensorData", function (sensorData) {
            console.log("Received data:", sensorData);
            const time = sensorData.time;
            document.getElementById('time').textContent = time;
            document.getElementById('temperature').textContent = sensorData.temperature + ' °C';
            document.getElementById('humidity').textContent = sensorData.humidity + ' %';
            document.getElementById('pressure').textContent = sensorData.pressure + ' hPa';
            document.getElementById('gas').textContent = sensorData.gas + ' KOhms';
            document.getElementById('altitude').textContent = sensorData.altitude + ' m';

            addLogEntry(time, sensorData);

            if (recording) {
                recordedData.push({ time, ...sensorData });
            }
        });

        connection.start().catch(function (err) {
            return console.error(err.toString());
        });

        function startCommunication() {
            const comPort = document.getElementById("comPortSelect").value;
            fetch('/api/Robot/StartSerialPort', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(comPort)
            }).then(response => {
                if (response.ok) {
                    clearLogs();
                } else {
                    response.text().then(text => alert(`Failed to start communication: ${text}`));
                }
            });
        }

        function stopCommunication() {
            fetch('/api/Robot/StopSerialPort', { method: 'POST' });
        }

        function fetchPorts() {
            fetch('/api/Robot/AvailableSerialPorts', { method: 'GET' })
                .then(response => response.json())
                .then(data => {
                    console.log("Available COM ports:", data);
                    const select = document.getElementById("comPortSelect");
                    select.innerHTML = '';
                    data.forEach(port => {
                        const option = document.createElement("option");
                        option.value = port;
                        option.textContent = port;
                        select.appendChild(option);
                    });
                })
                .catch(error => console.error('Error fetching COM ports:', error));
        }

        function restartCommunication() {
            stopCommunication();
            clearLogs();
            startCommunication();
        }

        function clearLogs() {
            document.getElementById('messages').innerHTML = '';
        }

        function startRecording() {
            recording = true;
            fetch('/api/Robot/StartRecording', { method: 'POST' });
        }

        function stopRecording() {
            recording = false;
            fetch('/api/Robot/StopRecording', { method: 'POST' });
        }

        function listRecordings() {
            fetch('/api/Robot/ListRecordings')
                .then(response => response.json())
                .then(data => {
                    const select = document.getElementById("recordingSelect");
                    select.innerHTML = '';
                    data.forEach(file => {
                        const option = document.createElement("option");
                        option.value = file;
                        option.textContent = file;
                        select.appendChild(option);
                    });
                });
        }

        function downloadRecording() {
            const fileName = document.getElementById("recordingSelect").value;
            window.location.href = `/api/Robot/DownloadRecording/${fileName}`;
        }

        function addLogEntry(time, data) {
            const logContainer = document.getElementById('messages');
            const logEntry = document.createElement('div');
            logEntry.textContent = `${time} - Temperature: ${data.temperature} °C, Humidity: ${data.humidity} %, Pressure: ${data.pressure} hPa, Gas: ${data.gas} KOhms, Altitude: ${data.altitude} m`;
            logContainer.appendChild(logEntry);
            logContainer.scrollTop = logContainer.scrollHeight;
        }

        window.onload = function () {
            fetchPorts();
        };
    </script>
</head>
<body>
    <h1>Serial Port Control and Sensor Data</h1>

    <div>
        <label for="comPortSelect">Select COM Port:</label>
        <select id="comPortSelect"></select>
    </div>
    <div>
        <button onclick="startCommunication()">Start Communication</button>
        <button onclick="stopCommunication()">Stop Communication</button>
        <button onclick="restartCommunication()">Restart Communication</button>
    </div>

    <h2>BME680 Sensor Readings</h2>
    <p>Time: <span id="time"></span></p>
    <p>Temperature: <span id="temperature"></span></p>
    <p>Humidity: <span id="humidity"></span></p>
    <p>Pressure: <span id="pressure"></span></p>
    <p>Gas: <span id="gas"></span></p>
    <p>Altitude: <span id="altitude"></span></p>

    <div>
        <button onclick="startRecording()">Start Recording</button>
        <button onclick="stopRecording()">Stop Recording</button>
        <button onclick="listRecordings()">List Recordings</button>
        <select id="recordingSelect"></select>
        <button onclick="downloadRecording()">Download Recording</button>
    </div>

    <div id="messages" class="log-container"></div>
</body>
</html>
